{"version":3,"sources":["components/Tooltip.js","components/MyMap.js","components/UserLocationText.js","components/CoffeeShopsText.js","App.js","reportWebVitals.js","index.js"],"names":["Tooltip","isVisible","name","distance","className","haversine","require","osmProvider","x","y","z","s","String","fromCharCode","MyMap","shops","userLatitude","userLongitude","useState","shopTooltipsVisibility","setShopTooltipsVisibility","userTooltipVisibility","setUserTooltipVisibility","onShopMarkerClick","index","payload","arrayCopy","provider","defaultCenter","defaultZoom","width","height","map","shop","anchor","parseFloat","color","id","onClick","createShopMarkers","Math","round","latitude","longitude","createShopTooltips","createUserMarker","createUserTooltip","UserLocationText","isLoading","error","CoffeeShopsText","length","App","userLocationState","setUserLocationState","coffeeShops","fetchError","coffeeShopsState","setCoffeeShopsState","onUserLocationChange","coords","onUserLocationError","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","fetch","method","then","response","json","jsonData","token","status","statusText","clearWatch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8b91354.chunk.js","sourcesContent":["import './../style/tooltip.css'\r\n\r\nconst Tooltip = ({ isVisible, name, distance }) =>\r\n    isVisible ?\r\n        <div className={'shopTooltip'}>\r\n            <p>{name}</p>\r\n            <p>{distance}</p>\r\n        </div>\r\n        : null\r\n\r\nexport default Tooltip","import { Map, Marker, Overlay } from 'pigeon-maps'\r\nimport Tooltip from './Tooltip'\r\nimport { useState } from 'react'\r\nconst haversine = require('haversine')\r\n\r\nconst osmProvider = (x, y, z) => {\r\n    const s = String.fromCharCode(97 + ((x + y + z) % 3))\r\n    return `https://${s}.tile.openstreetmap.org/${z}/${x}/${y}.png`\r\n}\r\n\r\nconst MyMap = ({ shops, userLatitude, userLongitude }) => {\r\n    const [shopTooltipsVisibility, setShopTooltipsVisibility] = useState([])\r\n    const [userTooltipVisibility, setUserTooltipVisibility] = useState(false)\r\n\r\n    const onShopMarkerClick = ({ payload }) => {\r\n        const index = payload\r\n        let arrayCopy = [...shopTooltipsVisibility]\r\n        arrayCopy[index] = !arrayCopy[index]\r\n        setShopTooltipsVisibility(arrayCopy)\r\n    }\r\n\r\n    const createShopMarkers = (shops) =>\r\n        shops ? shops.map((shop) =>\r\n            <Marker\r\n                key={shop.id}\r\n                anchor={[parseFloat(shop.x), parseFloat(shop.y)]}\r\n                color='black'\r\n                payload={shop.id}\r\n                onClick={onShopMarkerClick}\r\n            />\r\n        ) : null\r\n\r\n    const createShopTooltips = (shops) =>\r\n        shops ? shops.map((shop) =>\r\n            <Overlay key={shop.id} anchor={[parseFloat(shop.x), parseFloat(shop.y)]}>\r\n                <Tooltip\r\n                    isVisible={shopTooltipsVisibility[shop.id]}\r\n                    name={shop.name}\r\n                    distance={\r\n                        Math.round(\r\n                            haversine({ latitude: userLatitude, longitude: userLongitude },\r\n                                { latitude: parseFloat(shop.x), longitude: parseFloat(shop.y) }\r\n                            ) * 10) / 10 + ' km'\r\n                    } />\r\n            </Overlay>\r\n        ) : null\r\n\r\n    const createUserMarker = (userLatitude, userLongitude) =>\r\n        (userLatitude && userLongitude) ?\r\n            <Marker\r\n                anchor={[userLatitude, userLongitude]}\r\n                color='red'\r\n                payload={'user'}\r\n                onClick={({ }) => {\r\n                    setUserTooltipVisibility(!userTooltipVisibility)\r\n                }}\r\n            />\r\n            : null\r\n\r\n    const createUserTooltip = (userLatitude, userLongitude) =>\r\n        (userLatitude && userLongitude) ?\r\n            <Overlay anchor={[userLatitude, userLongitude]}>\r\n                <Tooltip\r\n                    isVisible={userTooltipVisibility}\r\n                    name={'Your location'}\r\n                    distance={null} />\r\n            </Overlay>\r\n            : null\r\n\r\n    return <Map\r\n        provider={osmProvider}\r\n        defaultCenter={[45.795, 24.147]}\r\n        defaultZoom={4}\r\n        width={600}\r\n        height={400}>\r\n\r\n        {createShopMarkers(shops)}\r\n        {createShopTooltips(shops)}\r\n        {createUserMarker(userLatitude, userLongitude)}\r\n        {createUserTooltip(userLatitude, userLongitude)}\r\n    </Map >\r\n}\r\n\r\nexport default MyMap","const UserLocationText = ({ isLoading, latitude, longitude, error }) => {\r\n    if (isLoading) return <div>Locating...</div>\r\n    if (error) return <div>Error: {error}</div>\r\n    return (\r\n        <div>\r\n            Your location: {latitude}, {longitude}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserLocationText","const CoffeeShopsText = ({ isLoading, shops, error }) => {\r\n    if (isLoading) return <p>Fetching coffee shop list</p>\r\n    if (error) return <p>{error}</p>\r\n    if (!shops || shops.length === 0) return <p>No shops</p>\r\n    return (\r\n        <ul>\r\n            <h2>Coffee Shops</h2>\r\n            {shops.map((shop) =>\r\n                <li key={shop.id}>\r\n                    {shop.name}<br />\r\n                    {shop.x}<br />\r\n                    {shop.y}<br />\r\n                </li>\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default CoffeeShopsText","import { useState, useEffect } from 'react'\r\nimport MyMap from './components/MyMap'\r\nimport UserLocationText from './components/UserLocationText'\r\nimport CoffeeShopsText from './components/CoffeeShopsText'\r\n\r\nfunction App() {\r\n  const [userLocationState, setUserLocationState] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n    isLoading: false,\r\n    error: null\r\n  })\r\n\r\n  const [coffeeShopsState, setCoffeeShopsState] = useState({\r\n    isLoading: false,\r\n    coffeeShops: null,\r\n    fetchError: null\r\n  })\r\n\r\n  const onUserLocationChange = ({ coords }) =>\r\n    setUserLocationState({\r\n      latitude: coords.latitude,\r\n      longitude: coords.longitude,\r\n    })\r\n\r\n  const onUserLocationError = (error) =>\r\n    setUserLocationState({ error: error.message })\r\n\r\n  useEffect(() => {\r\n    const geo = navigator.geolocation\r\n    let watcher = null\r\n    if (!geo)\r\n      setUserLocationState({ error: 'Geolocation is not supported' })\r\n    else {\r\n      setUserLocationState({ isLoading: true })\r\n      watcher = geo.watchPosition(onUserLocationChange, onUserLocationError)\r\n    }\r\n\r\n    setCoffeeShopsState({ isLoading: true })\r\n    fetch('https://blue-bottle-api-test.herokuapp.com/v1/tokens', { method: 'POST' })\r\n      .then((response) => response.json())\r\n      .then((jsonData) => {\r\n        fetch(`https://blue-bottle-api-test.herokuapp.com/v1/coffee_shops?token=${jsonData.token}`)\r\n          .then((response) => {\r\n            switch (response.status) {\r\n              case 200:\r\n                response.json()\r\n                  .then((jsonData) => setCoffeeShopsState({ isLoading: false, coffeeShops: jsonData }))\r\n                break\r\n              default:\r\n                setCoffeeShopsState({\r\n                  isLoading: false,\r\n                  fetchError: `Could not fetch shop locations ${response.status} ${response.statusText}`\r\n                })\r\n            }\r\n          })\r\n      })\r\n    return () => geo.clearWatch(watcher)\r\n  }, [setCoffeeShopsState])\r\n\r\n  return (\r\n    <div>\r\n      <MyMap\r\n        shops={coffeeShopsState.coffeeShops}\r\n        userLatitude={userLocationState.latitude}\r\n        userLongitude={userLocationState.longitude}\r\n      />\r\n\r\n      <UserLocationText\r\n        isLoading={userLocationState.isLoading}\r\n        latitude={userLocationState.latitude}\r\n        longitude={userLocationState.longitude}\r\n        error={userLocationState.error}\r\n      />\r\n\r\n      <CoffeeShopsText\r\n        isLoading={coffeeShopsState.isLoading}\r\n        shops={coffeeShopsState.coffeeShops}\r\n        error={coffeeShopsState.fetchError}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}