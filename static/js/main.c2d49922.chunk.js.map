{"version":3,"sources":["components/Tooltip.js","components/MyMap.js","components/UserLocationText.js","components/CoffeeShopsText.js","App.js","reportWebVitals.js","index.js"],"names":["Tooltip","isVisible","name","distance","className","haversine","require","osmProvider","x","y","z","s","String","fromCharCode","MyMap","shops","userLatitude","userLongitude","useState","tooltipsState","setTooltipsState","userTooltipVisibility","setUserTooltipVisibility","onMarkerClick","event","anchor","index","payload","arrayCopy","provider","defaultCenter","defaultZoom","width","height","map","shop","parseFloat","color","id","onClick","Math","round","latitude","longitude","UserLocationText","isLoading","error","CoffeeShopsText","length","App","userLocationState","setUserLocationState","coffeeShops","fetchError","coffeeShopState","setCoffeeShopState","onUserLocationChange","coords","onUserLocationError","message","useEffect","geo","navigator","geolocation","watcher","watchPosition","fetch","method","then","response","json","jsonData","token","status","statusText","clearWatch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2d49922.chunk.js","sourcesContent":["import './../style/tooltip.css'\r\n\r\nconst Tooltip = ({ isVisible, name, distance }) => {\r\n    return isVisible ?\r\n        <div className={'shopTooltip'}>\r\n            <p>{name}</p>\r\n            <p>{distance}</p>\r\n        </div>\r\n        : null\r\n}\r\n\r\nexport default Tooltip\r\n","import { Map, Marker, Overlay } from 'pigeon-maps'\r\nimport Tooltip from './Tooltip'\r\nimport { useState } from 'react'\r\nconst haversine = require('haversine')\r\n\r\nconst osmProvider = (x, y, z) => {\r\n    const s = String.fromCharCode(97 + ((x + y + z) % 3))\r\n    return `https://${s}.tile.openstreetmap.org/${z}/${x}/${y}.png`\r\n}\r\n\r\nconst MyMap = ({ shops, userLatitude, userLongitude }) => {\r\n    const [tooltipsState, setTooltipsState] = useState([])\r\n    const [userTooltipVisibility, setUserTooltipVisibility] = useState(false)\r\n\r\n    const onMarkerClick = ({ event, anchor, payload }) => {\r\n        const index = payload;\r\n        let arrayCopy = [...tooltipsState]\r\n        arrayCopy[index] = !arrayCopy[index]\r\n        setTooltipsState(arrayCopy)\r\n    }\r\n\r\n    return <Map provider={osmProvider}\r\n        defaultCenter={[45.795, 24.147]}\r\n        defaultZoom={4}\r\n        width={600}\r\n        height={400}>\r\n        {shops ? shops.map((shop) =>\r\n            <Marker\r\n                key={shop.id}\r\n                anchor={[parseFloat(shop.x), parseFloat(shop.y)]}\r\n                color='black'\r\n                payload={shop.id}\r\n                onClick={onMarkerClick}\r\n            />\r\n\r\n        ) : null}\r\n\r\n        {shops ? shops.map((shop) =>\r\n            <Overlay key={shop.id} anchor={[parseFloat(shop.x), parseFloat(shop.y)]}>\r\n                <Tooltip\r\n                    isVisible={tooltipsState[shop.id]}\r\n                    name={shop.name}\r\n                    distance={\r\n                        Math.round(\r\n                            haversine({ latitude: userLatitude, longitude: userLongitude },\r\n                                { latitude: parseFloat(shop.x), longitude: parseFloat(shop.y) }\r\n                            ) * 10) / 10 + ' km'\r\n                    } />\r\n            </Overlay>\r\n\r\n        ) : null}\r\n\r\n        {(userLatitude && userLongitude) ?\r\n            <Marker\r\n                anchor={[userLatitude, userLongitude]}\r\n                color='red'\r\n                payload={'user'}\r\n                onClick={({ event, anchor, payload }) => {\r\n                    setUserTooltipVisibility(!userTooltipVisibility)\r\n                }}\r\n            />\r\n            : null}\r\n\r\n        {(userLatitude && userLongitude) ?\r\n            <Overlay anchor={[userLatitude, userLongitude]}>\r\n                <Tooltip\r\n                    isVisible={userTooltipVisibility}\r\n                    name={'Your location'}\r\n                    distance={null} />\r\n            </Overlay>\r\n            : null}\r\n    </Map >\r\n}\r\n\r\nexport default MyMap\r\n","const UserLocationText = ({ isLoading, latitude, longitude, error }) => {\r\n    if (isLoading) return <div>Locating...</div>\r\n    if (error) return <div>Error: {error}</div>\r\n\r\n    return (\r\n        <div>\r\n            Your location: {latitude}, {longitude}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserLocationText\r\n","const CoffeeShopsText = ({ isLoading, shops, error }) => {\r\n    if (isLoading) return <p>Fetching coffee shop list</p>\r\n    if (error) return <p>{error}</p>\r\n    if (!shops || shops.length === 0) return <p>No shops</p>\r\n    return (\r\n        <ul>\r\n            <h2>Coffee Shops</h2>\r\n            {shops.map((shop) => {\r\n                return (\r\n                    <li key={shop.id}>\r\n                        {shop.name}<br />\r\n                        {shop.x}<br />\r\n                        {shop.y}<br />\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default CoffeeShopsText\r\n","import { useState, useEffect } from 'react'\r\nimport MyMap from './components/MyMap'\r\nimport UserLocationText from './components/UserLocationText'\r\nimport CoffeeShopsText from './components/CoffeeShopsText'\r\n\r\nfunction App() {\r\n  const [userLocationState, setUserLocationState] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n    isLoading: false,\r\n    error: null\r\n  })\r\n\r\n  const [coffeeShopState, setCoffeeShopState] = useState({\r\n    isLoading: false,\r\n    coffeeShops: null,\r\n    fetchError: null\r\n  })\r\n\r\n  const onUserLocationChange = ({ coords }) => {\r\n    setUserLocationState({\r\n      latitude: coords.latitude,\r\n      longitude: coords.longitude,\r\n    })\r\n  }\r\n\r\n  const onUserLocationError = (error) => {\r\n    setUserLocationState({ error: error.message })\r\n  }\r\n\r\n  useEffect(() => {\r\n    const geo = navigator.geolocation\r\n    let watcher = null\r\n    if (!geo) {\r\n      setUserLocationState({ error: 'Geolocation is not supported' })\r\n    } else {\r\n      setUserLocationState({ isLoading: true })\r\n      watcher = geo.watchPosition(onUserLocationChange, onUserLocationError)\r\n    }\r\n\r\n    setCoffeeShopState({ isLoading: true })\r\n    fetch('https://blue-bottle-api-test.herokuapp.com/v1/tokens', { method: 'POST' })\r\n      .then((response) => response.json())\r\n      .then((jsonData) => {\r\n        fetch('https://blue-bottle-api-test.herokuapp.com/v1/coffee_shops?token=' + jsonData.token)\r\n          .then((response) => {\r\n            switch (response.status) {\r\n              case 200:\r\n                response.json()\r\n                  .then((jsonData) => setCoffeeShopState({ isLoading: false, coffeeShops: jsonData }))\r\n                break\r\n              default:\r\n                setCoffeeShopState({\r\n                  isLoading: false,\r\n                  fetchError: 'Could not fetch shop locations ' +\r\n                    response.status + ': ' + response.statusText\r\n                })\r\n            }\r\n          })\r\n      })\r\n    return () => geo.clearWatch(watcher)\r\n  }, [setCoffeeShopState])\r\n\r\n  return (\r\n    <div>\r\n      <MyMap shops={coffeeShopState.coffeeShops}\r\n        userLatitude={userLocationState.latitude}\r\n        userLongitude={userLocationState.longitude} />\r\n\r\n      <UserLocationText isLoading={userLocationState.isLoading}\r\n        latitude={userLocationState.latitude}\r\n        longitude={userLocationState.longitude}\r\n        error={userLocationState.error} />\r\n\r\n      <CoffeeShopsText isLoading={coffeeShopState.isLoading}\r\n        shops={coffeeShopState.coffeeShops}\r\n        error={coffeeShopState.fetchError} />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}